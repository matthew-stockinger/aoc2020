// side note: inside parentheses re: /\([\d\+\*]+\)/

const parseInput = (input) => {
    return input.replace(/\s/g, '');
}

const parseHomework = (problems) => {
    return problems.split('\n').map(problem => parseInput(problem));
}

let testInput1 = parseInput(`1 + 2 * 3 + 4 * 5 + 6`); // 231
let testInput2 = parseInput(`1 + (2 * 3) + (4 * (5 + 6))`); // 51
let testInput3 = parseInput(`2 * 3 + (4 * 5)`); // 46
let testInput4 = parseInput(`5 + (8 * 3 + 9 + 3 * 4 * 3)`); // 1445
let testInput5 = parseInput(`5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))`); // 669060
let testInput6 = parseInput(`((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2`); // 23340
let testHomework = [testInput1, testInput2, testInput3, testInput4, testInput5, testInput6];
let realInput = 
`(5 * 7 * 5) * 6 * 5 + 7 + 6 * 4
(2 + 3 + (2 + 8) * 3 + (7 + 4)) * 3 + 7
2 + 4 * (2 + 2 * (9 + 2 + 6 + 3 + 6) + 4)
4 * 3
9 + (8 * 5 * 5 * 4 * (3 * 5) * 2) + 4 + 4
5 + 5 + 2 * 4 + 4
7 + 9 * 2 + 2 * 3
5 + 8 + 5 * (6 * 8 * (9 * 2 + 2 + 7 + 4 + 2) + 4 * 6) * 5
8 * 7 * 4 * 5 + 3
(9 * 9 + 9 * 7 * 4) + 9 + 5 * (5 + (8 * 8) * (2 * 8) * (5 + 3 + 5 * 5 + 4 + 2)) + 2
(4 + 7 + 2) + 9 * 3 + 7 * ((8 * 7) + 5 * (9 * 9) * 8 + (8 * 2)) * 9
8 * 2 * (2 + 5 + (5 * 4 * 2 + 7 + 3 * 4)) + ((4 + 9) + (4 * 8) + (6 * 8 + 6) + (4 * 3 * 9) + 5) * 7
7 + 2 + 8 * 2 * (2 * (6 * 2 * 4 * 5) * (4 * 4) + 2 + 3 + 2) + 6
8 * ((6 + 8 * 3 * 9) + 9 + 8)
7 + ((6 + 3 + 7 + 6 * 7) + 6 * 6)
5 * (7 * 5 + 4 + 7 * 4 * 4) * (7 + 6 * 4 + 4 + (3 + 3 * 7 + 2 + 8)) * 8
((3 * 7 * 3 * 9) * 2 + (5 * 2 * 6 * 6 * 5 + 6)) * 4 + 6 * 4 + 7
2 + (7 + 5 + 9 + 9) * 4
(9 + 6 + 5 * 5 * 5 + 5) * 9 * 2 + (6 * (8 + 4 * 9) * 5 + 7) * 9 * 5
9 + 2 + (5 * 6 + 7) + 4 + 7
9 * (2 * 9 * 4 * 4 + 6 * 6) * 8 * 3 * (4 + 7 + 8 * 3 + 4 + 9) * 9
2 + 4 + 6 * 6 * (3 * 3 + 6 * 4 * 8) * (5 + (9 * 2))
9 + (6 + 8) + 7 * (8 * (7 + 6 * 4) + 7) * ((6 * 7) + 8 + 2) * 8
((6 * 3 * 2 + 8 + 4) * 6 + (7 * 7 * 7 + 3)) * (2 * 5 + 2 * 3) + ((2 + 8 * 5 + 4) + 6 + 6 * (3 + 8 * 9)) * 5 * 4 + 2
(4 + (3 + 9 * 9 + 9 + 2 * 3) + 6 * 2 * 3) + (7 * 7 * 8 + 6 * 5) * 7 + 8 + (7 + 7 + 4)
9 + (5 + 5 * 4 * 4 * 3 * 8) * 6 + 5 + 4
8 * 2 + 9 + 7 + 6 * (3 * 6 * 7 * 6 * 8)
(7 + 6 * 3 * 3) * 8 + (8 * 2 * 5 + 8 + 2) + 4
5 + 9 * 5 + 5 * 6 + (7 * 8 * 8 + (2 + 9 * 4))
((7 * 4 + 2 + 6 + 3) * 4) + 7 + 7
(7 * 8 + 8 + 3) * 3 * (9 * 5 * 3 * 9) * 5
6 + (8 + 8 * 7 + 7) + (5 + 7 * 4 * 4 * 5) * 5 * 2 * (5 * 4 * 5)
2 * (5 * (8 + 5 + 8)) * 5 * ((6 + 9 + 6 + 8 + 9) * 4 + 8 + 7 + (5 * 7 * 2 * 3))
8 + 9 * 7 + ((6 * 4 + 3 * 9 + 9) * (3 + 8 * 5 * 4 + 5 + 5) * 2 + (2 * 2 * 3 * 9))
2 * 9 + 4 * (2 * (7 + 8 * 2 * 9 + 2 * 6) * 3 * (6 + 3 * 7 * 7 + 4))
5 * 3 + (8 * 6 + 7 * 8 + (8 + 3)) * 7 + 3 * 2
((2 * 7 + 7) * 9 * 8 * 7) * 6 * (6 + 2) * 9
7 * 6 * (3 * (5 * 7 + 5 * 4) * (4 + 6 + 3) + (6 * 7)) * 3 * 8
(3 * 6) + 7 * 2 * 6 + 7 * 3
6 * 3 * ((4 + 8 * 7 + 2) * 3)
6 + 9 + (3 * 9 * 5 * 8) * 7 + 8
8 + 6 + 2 * 2 + ((7 + 4 * 9) + 8 * 4)
6 * 3 * 5 + 7 + 5
((4 + 5 * 2) + 6 * 7 * 7 * 6) * (7 + 8 * 4 + 9)
(8 * 5 + 8) * (5 + 4 * (5 * 7 * 4 * 8 + 4 * 4) * 9) + (2 * 2 + (8 + 3) * 4) + (4 * 4)
6 * (5 * 4 + (5 + 8 * 7)) * 2
(2 * 2 * 9 + 9 + 8) * (6 * 6 + 8 * (5 * 4) * (3 + 8) + 2) + 5 + 2
2 * (3 + (5 + 4 * 4 * 2 + 8) + 8 * 2 + 8 + 5)
3 + 9 * (7 + (2 * 5 * 5 * 4 * 9) * (8 * 3) + 5) * 2
(2 * (2 * 4 * 7 + 7 + 4)) * 8 * 6 * 7
(4 * (5 * 2 * 3 * 7) * 5 + (2 * 9) + 6) + (6 + 8 * (4 * 6 * 4) + 2 * 6 * 2) + 6 * 5 + 5
5 + (7 + 3 + 6 + 9 + 5 + (3 + 9 * 8 + 8 + 7)) * 9 * 9
3 + 2 + (4 * 6 + (2 * 8 + 6 * 7) + 6) * 9 * 9
(3 + 2 * (8 + 9 + 8) * 5) * 3 * 3 * ((3 + 9 * 7) + (9 * 8 + 6 * 9 * 9 * 3) * 5 * 7 + 4) + 5 * 4
7 * 6 + 8 + 2 * (5 + 3 * 5 * 5 * 7 + 8) + 9
7 + 6 * 6 + (5 + 6) * (8 * 3 + 2 + 9)
6 * (7 + (3 + 8 * 9 + 4 + 7) + 6 * (2 + 8 + 3) * 5) + 9 * (5 + 5 * 2) + 8 + 3
(6 + 6 * 9 * 3) * 6 * 3 + (5 * 4)
6 * 9 * 8
7 * 4 * (8 + 7 + 7) * 4 * 7 + 4
5 + 8 * 5 * 7 + 7 + 5
2 * ((9 * 3 * 7 + 6 * 6) + (5 * 3 * 2 * 8)) * (8 * 3 + 2 * 6) * 6 * 5
9 + 5 + 6 * 5 + (9 * 4 * (8 + 2) * 6 + 4 * (2 + 3 + 2 * 2)) + 4
6 * 4 + (2 + 4 + (6 * 9 * 3 * 8 * 6 + 8)) * 4 + 5
9 + (3 * 5 * 4 * 9 + 6) * 7
9 + (8 * 2) * (3 * 7 + (7 * 2) * 8) + 5 * (7 + 9 * 7 + 3)
(5 + 3 + 4 + 8 * 3 * (6 * 5 * 9 * 3)) + 2 * 4
4 + ((2 * 9 * 2 + 5) * 6 * 5) * (5 + 2) + 7 * 5 + 5
8 * 3 * (9 * 3 + 5 * (5 * 4 * 3))
8 * ((3 + 8 + 5) + 6 + 9) + 7 + 4 * 5
(9 + 9 + 7) + (7 * 2) * (7 * 3 + (5 + 2 * 3) * 9 * 3) + ((2 * 6 + 2 + 7 + 8 * 2) * (2 + 3) + 4)
(9 + 8 * 9 * (7 + 7) + 5 * 7) + 9 + 2
3 + (8 * 5 + 9) + 2 + 8 + 8
5 + 2 + (5 * 8 * 3 * 7 * (3 * 7 + 6) * 4) * 3
((7 * 9 + 3 + 2) * (9 + 9 + 7) + 4 * 4) * 7
(7 * (3 * 8 + 3) + 4 + 6 * (4 * 7 + 9)) + ((4 * 6 * 6 * 9) * (6 + 3 + 2 * 8 + 5 * 7) + 3 + 2 * 2 + 3) * 2 + (6 + 4 * (6 + 7))
7 * (6 * 7 + 6) + 2
4 * (3 * 4) + 9 + 8 + (4 + 5 + 9 * (7 + 9 + 5) + 7 + 2)
7 + 2 * 5 + (4 + (8 + 3 * 3 + 6) * 5 * 7) + 6 + 3
(4 + (9 + 8 * 7 * 7) * 3 * 6) * 7 + 9 * 7 + 5
2 + 4
(2 * (8 + 3 + 8 * 2 + 7 + 3) + 7 + 7 + 6) * 3 * 7 * 7 * 2
9 + 6 + 2 + (5 + 5 + 2 * 3) + 9
3 * (6 * 8 + 2 * 8 + 7 * (3 + 3 * 4 + 2 + 7)) * (4 + 4 + 6 * 2 * 4 + 4) * 8
5 + (5 + 8) + (2 + (7 * 9 * 2 + 8) + 6) + 9 + 3
9 + 5 + (8 * 4 * 3 + 4) + (6 * 3 * 9) * 3
(5 * 7 * (7 * 7 * 6) * (8 + 2) + 8 * 7) * 3 + 7
8 * (6 + 6 * 4 + 9 + 4) * 3 * 6 * 8 + 6
5 * 5 + 2 * (5 * 2 * 9 + (6 + 7)) * 7
(5 * 6 * 5 * 3) * 2 + (8 + 6 + 9 * 7 + (2 * 3 + 3 * 8 + 5 + 2))
8 + 7 * ((6 + 4 + 4 + 8 + 7) + 2 * 5 + 3 * 9 + 6) * (3 * 5 * 5 * 9 * 4) * 3 + ((3 + 4 + 2 * 3 * 2 + 2) + 7)
(8 + (9 * 6 * 3) * (9 + 8 + 3) + 4) * 5
4 + (4 + 2 + 7 + 9 * 3 * 7) + 9 * (5 + (9 + 9 + 7 + 8 + 8) * 7 + (2 + 2 * 9 + 3)) + 3
4 + 5 + 5 * (6 * 6 + 3)
(7 * 7 + 6 * 7 * (4 * 2 + 9 + 7)) + 8
(4 * 7 + 9 * 6) * 6 * 4 + 8 * (6 + 7 * 9) * 2
7 + (8 + 9) * 6 * 3 + 4
8 * (7 * (7 * 3 + 3) + 3 * 5 * 9 * 2) * 6 * ((2 + 4 * 5 * 2 + 5 + 3) + 4 + (4 * 2) * 2 * (9 + 5 + 3 + 7) * 5) + (5 + 5 + 3 + (6 + 6 * 2 * 8 + 6))
6 * 6
8 + 5 + 5 + (8 + (3 * 5) + 5 * 3) * 2 + 5
((4 * 7 * 3) * 7 + 2 * (6 + 2) * 8) * 8
(6 + 3 * 5 * 5 * 6 + 2) * 3 * 7 * 6
6 + (9 * (4 * 8 * 5 * 3 + 6 * 9) * 4 * (8 + 3 + 3 * 4) * 6 + 4) + 4 * 2 + 9
((5 + 4 + 6) + 7 * 8 + 7) + 8 + 9 * 8 + 3
(4 + 2 + 5 + 4 * 7 * 9) * (7 + (2 * 9) * 8) + 3 + 5
(3 * 6 + 8 * 8 + 2) * 6 + 4 + (7 + 2 + 6 + 2 * 7)
8 + (2 * 9 + (3 + 4 + 3) + 2)
5 + 2 * (5 * 9 * (6 * 8 * 3 + 6) * 8 * 5 + (5 * 4)) + 9
6 + ((8 * 3 + 5 + 9 * 9) * 3 + 6 * 9) * (5 + (5 * 4 * 8 + 5) * 4 * (3 * 2 + 7 * 7 * 4) + 2 * 2)
9 + 4 * (2 * (6 + 9 + 6 * 8 + 7)) * 9 * 2
4 + 8 + (8 + 5 * 8 + 7)
8 * (2 + 4 + 5 + 7 * 6) * (4 + 9 * 4 + 7 * 2 * 7) * 6 + 9 + 4
8 + 3 * 8 * (2 * 5 + 5 + (5 * 2 * 6 + 3) + 6) * 9
((4 + 5 * 7) * 9 * 8 * 2 + 6) + 9 + 7
((4 + 3 * 6 * 3 * 4 * 7) + 3 * 5 * 4) + 9 * (8 + 7 * 2 * (2 + 8) + 9 * (2 * 8)) * 5 * 5 * 8
2 + (5 + 6) * 4 + (9 + 5 * 5 * 7 * 5 + 2)
6 + 6 * (6 * 3 * (2 + 3 + 4 * 3 * 7) * 3 * (4 * 9) * 5) * 9
7 * 2 * (9 + 8 + 3 * 9 * 4) + 8
(9 * 8 * 2 + 7 * 2 * 8) * 4 + 9 + (3 + (3 + 3 * 5 + 2) + 9 * 4 * (5 * 3 + 2)) * 6
7 * 2 * 9 + ((5 * 5 * 8 * 4 + 3 + 7) + 8 + 2 + 3 + 6) * 5 * (8 + (5 + 6 + 7 + 6 + 8 * 6) * 6)
5 + 6 * ((3 * 7 * 2 + 6 * 9) * 6 + 2 * (8 * 5 * 5 + 9 + 8)) * 6 + 4 * 7
7 + 7 + 9 * 6 * 4 + 3
4 + (3 * 8 + 8 + 2) * 8 * (9 + 3 + 7) * (4 + 7 + 2 + 5)
9 * 2 + 5 + 6 * 6 + (3 + 9 * 6)
(6 + 3) + 5 + (4 * 6 + 8) * 6
9 * (6 + 6 * 7 + 6) * 7 * 3 * 5 + 4
(7 + 8 + 8 * 2 + 5) + 7 + 2
(5 * 4 + 8) + 9 + (3 + (8 + 2 * 5 * 7) * 9 + 3) * 7
(2 * 3 + (7 * 4) + 8 * (6 + 4 + 7 * 4 + 5 + 4)) * 7 * 9 * 8 + (3 + 6 + 6 + 9 + 2)
2 * 2 * (3 * (5 + 4 * 4 + 9 + 7) + 5 * 8 * (7 + 2 * 2))
2 * 5 * 8 + 6 + (2 + 3 * (7 + 4 + 4)) * 6
3 + 3 + 2 + 8 + (4 + 9 * (5 + 7 * 3 * 8 + 4))
(6 * 8) * 5 + 5 * 8
2 * 3 * 9 * (3 * 7 + 6 + 9) + 2 + 6
5 * 8 * (2 * 3 * 7 + 3) * 7
2 + (5 * 5 * 8 * 7 + (3 * 9) * (3 + 8 + 3)) * 5 + (6 * 2 * 9 + 3 + (4 + 4 * 7 + 6 * 6 + 8) + 9) + 5 + 9
(3 * 5 + 7 + 5 + 5 * 7) * (2 + 4 * 4) + 5 * 6 + 9
4 + 4 + ((9 * 3 + 5 + 4 * 7) + 6 * 6 * 2 + 9 * 2) * 9 * 9
7 * (4 + 7 + (5 + 5 * 8 + 8 * 3 * 3) + 7 * 7 + 7)
2 + 9 + 2
((9 * 8 + 4 * 3 + 6 + 6) + (4 * 2) + 2 * 9 + 4) + 6 + 7 + (3 + 8 * 9 * 8) + 2 * 2
(3 + 6 * (9 * 6) * (2 + 6 + 7 * 4) * 7 * 3) * 9 + 8
4 + 7 * (2 * 2 + 6) * (2 + 4 + 6 * 5 + 6)
(8 * 7 * 4 + 7 * 5 + 7) + 6 * 2
2 * 2 + 3 * (4 + (3 + 9 * 3)) * 4
6 + 5 * 5 + 9 + ((7 + 6 + 2) + (2 * 6 * 2 * 5) * 7 * 4 * 3 * (6 * 4)) + 9
3 + 2 * ((9 + 2 + 2 + 6 * 9 + 4) + 5) * 8 * 9
(8 + 4) + 2 + (2 * 2 + 8 * (5 * 6 + 6 * 4 + 9) + 8) + 2 * 8 + 2
2 * 5 * 7 * 6 * (8 * (2 * 7 * 4 + 6) + 3 + 9 * (8 * 3 + 2) * 8)
4 + 3 + 4 + (6 + (6 + 4 + 7) + 4 + 7) * 6
8 + 5 + (9 * 6 * 6 + (3 * 9 + 3 + 6 + 9))
((3 + 6) + 6 * 3 + 3) * 2 + (9 * (8 * 7) + (2 * 9 * 6) * 6 + 2) * 8 + 2
((7 * 4 + 7 * 4 + 2 + 7) * 3 * (7 * 8 * 4 + 8 + 4 + 4)) * 6
6 * 4 * (8 + 5 + 2)
(8 + 5) * 2 + 4 + 6 + 3
((4 * 5 + 7 * 2 * 8 + 9) + 4) + 7 + 3 * 8
2 + 2 * 3 + 7 * (3 * 6 + 9 + 5 * 7 * 5)
8 * (9 * 8 * 7 + 9 * 6 + 9) + 9
5 * (4 * 3) * 6
5 * 6 * 8 * (2 * (4 + 5) * 4) + 3
4 + 8 * (2 + 6 * 8 * 7 + 9 * 3) + 5
2 * 3 * 7 * (2 * (7 + 7 + 8) + 8 * 7 + 6 + 2) * 7 + ((4 * 2 * 3) + 9 * 7)
9 + 6 * 6 + (3 + 4 * 3 + 9 + 5 + 3) * 4
(2 * (4 + 3) * 9) * (2 + 9 * (6 + 6 + 3 * 5 + 2 + 4) * (2 + 5 + 4 + 7) + 2 + (4 + 4 * 8 * 7 * 7)) + (3 * 7 * (3 + 3 + 3 + 2) * (6 * 3 * 8)) * 4 + 4
(4 + 7) + (3 * (5 * 3 + 5 + 9) * 9 * 3 * 9)
9 + 7 * ((2 + 2 * 8 + 7 + 6 * 5) + (6 * 7) * (3 + 6 + 8 * 5) * (8 * 8) * (3 + 3 * 7 + 4 + 7))
9 + 9 * (3 * (6 + 7 * 9 * 7 + 3)) + 3 + 6 + 9
2 + ((3 + 7 * 8 + 9) + (8 + 8 * 9)) + 6 + 7 * 8
4 * (6 + 8 * 8 + 4 * (3 * 2))
(5 + 5 * 3 * 3 + 3) * 7 + 7 + 3
2 * (2 + 6 + 4 * (3 + 4 + 7 * 8 * 9 + 9)) * 9 * 7
(4 + 6 + 7 + 4) * 7 * ((4 + 9) + 8 + 5 * 7)
8 * 6 + 6 + 7
(5 + 3 * 2 + (4 * 4 + 5 * 4) + 3) + 7 + 8 + 8 + 7 * 3
4 + (7 * 5 + 6 * 7 + (2 * 7 * 8) * 3)
7 * ((3 * 3 + 2) + (8 + 6)) * 4 + (7 * 7) * 8 * 7
((5 * 8) * 6 + 8) * 5 * 7
3 * 3 + 5 + ((2 * 4 + 3 + 8 + 8) + 2 + (7 * 9 * 6) * 6 * 6)
7 + 7 + 5 + 4 * ((5 + 8 * 8) + (2 * 2 * 2 * 6)) * 6
(4 + 6 + 7) + 2 + 3
(8 + 8 + 2 + (4 + 6 * 4 + 9 + 9 + 4) * 6 * 4) + 9 * 4 + (9 * 7 + 5 * (3 * 9 + 4 + 7) + 7 * 4)
8 + (8 + 5) * (8 * (3 + 3 + 5 + 9))
8 + (4 + (7 + 8 + 4 + 9 + 4) * 7 + (5 * 9 + 2 * 6 + 6) + 4 * (7 + 2))
(3 * 7 + 8 + 6 * 3) + 5 * 5 + 7 * (9 + 5 + 7 * 8)
(9 + 7 + 2 + 2) + 4 * 4 * 9
2 + (4 + 4 + (8 * 9 * 2 * 7 * 2) * 8 * 5) * 5 + (4 + (3 + 2) * (3 * 2 * 9 + 9 * 8 + 5) + 2 * (3 * 4 * 7 * 5 * 6 + 7) * 5)
(2 * 6 * 9 * 7) + (4 * (4 + 3) + 9) * 9
4 * 3 + 5 + (6 * 6 * 3 * 9 * 7) * 7 * 4
8 * 6 * (2 * 6 * 2 * 7 * (6 + 4)) * 4 + 5
4 * 9 + 7 * 6 * ((9 + 7 * 5 * 5) + 7 * 9)
3 + (8 + (5 * 2 + 8 * 7 + 6 + 3) + (7 + 9 * 2 + 3) * 6 * 7)
4 * 7 * 4 * (4 * 5 + (7 + 6 * 7 + 8)) + 4
(8 + 5 * 3) + ((8 * 7 + 6 * 5 + 8 + 9) * 5 + 2 + 7 + 8 * (5 + 7 + 4 + 4)) + 3 * 9
6 * (7 + 2) + 4 + 7 * 2 * 5
(2 * 9 * 9 * (3 * 4)) * 7 * 4 + 2 + 4
(8 + (9 * 2 * 8) + (5 * 9 * 5) + (5 * 6 * 3 + 8 * 2 + 6) * 5 * 5) * 6 + 8 + 3 * 3 * 2
2 * 5 * 7 * 4
(2 * 8) * (2 + (4 + 2 * 5 + 2) * (2 + 7 + 6) + 5 + 5 + 7) * 4 + 8 * 7
(8 * 5 + 4) * 5
(9 * 6 + 8 * (3 * 8) + 5) + (8 * (3 * 9 + 7 * 3) + 9 + 2 + (4 + 5 * 7 + 6 * 9)) * 6 * 8
5 * 4 + 3
(8 + 7 * 9 + 5 * 5) + 9 + 3 * (6 + 6 + 5)
(3 * 7 + 2 * 4 + 4) + 8 * 6 + 3 * 5
((4 + 8 + 8 * 7) + 9 * 7 + 8 + (8 + 3 + 2) * 3) * 2 + (6 * 7) + 8
(7 + (3 * 5 * 7 * 6) * 7 + (8 * 3 + 9 + 8 * 9 + 8) + 8) + 9
((6 * 7 * 7 + 4) * 8 + 6 + 4 + 9) + 7 + 4 + 2 + 5 + 5
4 * (2 * 2) + 2 + 3 * 3 + (4 + 2 + 2)
((4 * 8 + 8 + 9 + 3 + 3) * 9 * 9 + 7 * (6 * 5 * 3 + 3 + 3)) + (9 * 5 * 2) + (2 + 7 + 6) * 3 * 6
(4 * 5 * (8 * 7 + 8 + 4 + 3 * 9) * 3 + 7 * (3 + 4 + 3)) + 3 + 6 * ((6 + 2 * 8) * 9) + 2 + 4
7 * 3 + 8 + (8 + 2 * 9 * 2 * (7 + 4 + 7 + 7 * 7 * 8)) * ((4 * 6 + 7 + 4 + 6) + 5 + 3 + 6 * 6 * (6 + 2 * 9 + 6 * 7 + 3)) * 5
(7 * 8 + 2 * (5 * 7) + 7 * 4) * 8 + 2 * 3
4 + (8 * 3 + 9 * 9 * 3) + 7 + 7 + (3 * 4)
(4 * (5 + 9)) * 9 + 5 + 7
6 * 2 * 9 + 4 + 6 * 2
(7 + 3) * ((3 * 7) + 8 + (8 + 6 * 2 * 8 * 6 + 2)) * (7 + 9)
9 * 4 * 3 + 7 * 6 + (3 + 8)
4 * ((2 * 6 + 3 * 4) + 3 * 4) * 7 + 8
(8 + 7 * (4 * 8) * 6) + 7 + 4 * 4 * ((8 * 9 * 7 * 9 + 7 + 3) + 6 + 8)
5 * (9 + 3 * 4 * (2 * 9 * 4 * 2 + 3) * 8)
4 * 9 * 8 * 7 + (6 * 9)
(4 + 4 + 3 + 5) + 9 * 4
9 + (4 + 7 + 6 + 4 * (8 * 9 * 7 * 3 * 2 * 6)) + 3 * 6
5 + 6 + (6 * 5) + 8 + 7
(9 + 4 * 8 * (8 * 7 * 2 + 4) * (5 * 4 + 9)) + 6 + 5
5 * 2 + 9 + ((3 + 2 * 9 + 3) * 5 * 9 + 2 + 3) * 8 + 5
(6 + 8 + (3 + 8 + 4 * 4) + 6 * 9 * 3) * 7 + 3 + (5 * 9 + 2 + 7 + 6 * 8) + 5 + (3 + 2 + 2 + (3 + 4 + 2))
9 * 3 + 7 + 6 * 7 + 3
(2 * 4 * 3 * 7 + 5) + 6 + (2 + 7 + 4 + 3 * 4) + ((7 * 2 + 7 + 6 * 8) + 6 * 2 * 5)
((2 * 4) + 3 + 6 + 6 * (7 * 4 * 6 * 5)) * 3 * 6 + (9 * 5 + 8)
(4 * 3 * 4 * 4) + 5 + 8 + ((8 + 6 + 8 * 9 + 7 * 5) * (6 * 2 * 3 * 6 * 8) * 3) + 8
(3 * 8 * (8 + 4 * 2 * 9)) + 4
3 + 7 * 7 + 3 + 9
((4 * 7 * 2) * 2) + 2 + 9 * 3 * (9 * 3 + (8 * 5 * 9 * 9) * 6)
9 * 6 * 4 + 5 + (6 + 5 * 4 * (8 + 9))
2 * (2 * (6 + 2 * 2 + 9 + 6) + (8 + 8 + 7) + (6 + 8 + 7)) * 2 + 5
5 * 8 * 2 + (7 * 7) + 7 + 6
6 + (5 * 9 * 7) * 3 * 7
3 + 9 * (4 + (5 * 8 + 4 + 4 + 5))
4 * 7 * (8 * 2 + (3 * 8 + 9 + 2 + 6 + 6))
(9 + 3) * 6 * 9 * 2 * 8 + (7 * 8)
(8 * 2 + (5 * 8 + 6 * 9 * 8 * 3)) + 9 * ((9 + 6 + 3) * 6 * 4 * 4 * 5) + 8
3 + 3 * (3 * 6 + 8 + (8 * 7) + 5) + 7
5 * 3 * 2 * 3 * (4 + 9 + 8 * 9)
(8 * (9 + 5 * 8) + (6 * 8) + 2 + (8 + 3 + 4 * 5 * 3) + 4) * (4 * 4 * 9 + 9 * 6) + 6 + 3
2 + (5 + 8 * (5 + 4 * 7 * 4) + 4 * 7 + 5)
5 + ((6 * 9 + 5 + 5) + 2 * (4 + 4 + 2 * 6 + 3 + 9)) * ((3 * 5 * 2 * 8 * 5) + 2 * (4 + 9 + 5 * 9 * 8) + (2 + 6 * 6 * 5 + 3 + 9)) * (2 + 9 * 9) + 2 * 6
5 + 2 * ((7 + 4) * 3 * 6) + 7
4 + 3 * 6 * 8
(8 + 7) * 5 + (2 + 5 + 3 + 4 * (3 + 7) + 3)
(2 * 2 * 7) + 2 * ((4 * 5 * 2) * 5 + 9 * (7 * 4 + 2 * 2 * 9) * 9) + 9
3 + 6 * (7 * 7 * 2) + 6
6 + (2 * 7) * 4 * ((3 * 2 * 4) + 3) + (7 + 2 * 7 * (5 * 2 * 3 * 3 + 8) + 7 + 7) * 8
(5 * 3 + (8 * 8 * 5 + 3 + 2) + 6) * 5 * ((5 + 2) * (9 * 7 * 2 * 3 * 6) * 6 * (9 * 5 * 5 + 3 + 9) + (9 + 3 * 5))
9 * 4 * 7 * 3 + (5 + 2 * 6 + 9) + (2 * 4)
(4 * (9 + 3 * 7 + 7 * 5) + 2) + 6 * 4
8 + 5 * 6 * 2 * 2 + (8 * 4 + 6 * 9 + 2 * 5)
4 + (9 * 4) * 5 + (2 * 8 * 7)
7 * (3 + (4 * 3 + 8 * 3 * 3) * 5 * 4)
9 + 7 + (3 * 3 * (7 * 4) + (9 * 4 + 3 * 6 + 6 * 7) + 9) * 2 + 5
8 + 6 * 9 * 4
8 + 3 * (9 + (3 * 7 + 3 + 9 + 3) * 9) * 4 + 8
4 + ((6 * 4 + 4 * 2 * 6 * 5) + 2 * 2) + (4 + 5 + 8 * 5 * 5) * 3 * 5 * 7
(9 + 8 + 6 * 5 * 5) * 4 + (8 * 3 * 5) * (9 + (3 + 9 + 5 * 3 * 6 + 6) * 7 + (8 * 8 + 8) * 2 + 4)
(8 * 6 * 2 + 5) * 9 + 6 * 2 * 5
2 * 5 * 3 + 7 + 6 * 6
(3 * (4 * 9 + 6 * 2) * 8 + 8) + 7 * 5 + 9 + 2 * 2
8 + (8 * 4 + 6 * (7 * 7 + 3 * 4 * 7 + 2))
3 + (7 * (4 * 8 * 8 + 3 * 9) + 2 * 9) + 6
8 * (6 * 9) * 7 + (9 + 2 * 9 * 7) * (3 + 7)
((6 + 7 + 4 + 8) * 5 * 7 + 3 + (8 * 2 * 5 + 9)) + 5 * 2 * 9 * 4
3 * (7 * 7 + 6) * 3 * (5 * (7 * 2 + 6 * 9 + 9) + 3 + 6 * 9 * (2 * 3 * 6 * 9)) * 6 * 5
(2 * (9 + 4 + 4 + 5 + 5) * (6 * 7 * 4 * 9) * (9 + 4 + 8 * 4) * 3) * (9 + 3 + 3 * 3 * 4 * 2) * 5 + 2 + 5 + 3
(7 * 8) + (8 * (3 * 8 + 4)) + 3 * 7 * 7 * 6
2 * 6 * (6 * 3 * (2 + 8 * 5 * 3 + 3 + 4)) * 5 + (9 + 9 + 2 + 3 * 3)
5 + 7 + 4 * 2
4 * 3 + 7 + 9 + (5 * 2 + (5 * 6) + 3 + 4) + 6
8 * 4 * (9 + 3 + (7 * 8 + 7 * 6 + 4 * 3)) * (6 + 9 + 9 * (3 * 7 * 9 + 2 + 2 + 2) * 6 + 4) + 8
(5 + 9 + (8 + 7 + 6) + 8) + 6 + 2
2 * (9 + 3 + 4 + (5 + 5 + 2 * 2 + 3 + 8) + 9) * 6 * 7 * 2
5 * (6 * 7 + 2) * 9 + 7 + 4 + 3
9 + ((4 * 4 + 3 + 8 * 6 * 7) * (8 * 4 + 9 * 4 + 8) + 6 + (9 * 3 + 5 + 7 + 9 + 3))
6 * (3 + 8 * (5 * 7 + 5 + 8)) * 5 * 4 + 8 * 3
7 * (3 * (7 * 4 * 8) + 4 + 3 * (2 * 3)) * 4 + (7 + 6) * 9
(3 + (5 + 4 + 3 * 3 * 2 + 9) + 7 + 2) + 6
3 * (5 + (3 + 3 + 4 * 5 * 8 * 9) + 9)
4 * (6 + 4) + (8 * 4 * (8 + 8 * 7 * 8 * 4) * 8) * 7
(9 * (4 * 5 + 9 * 6 * 7 + 4) + 4 * 3) * 5 + 7 + 7 + 9
5 * (7 * 8 * 8) + 4 + 9 + (4 * (3 * 5 * 6 * 7) + 4 * 8 * 4 * 3) + 2
4 * 6 + 8 * ((3 + 4 * 3) + 6 + 3 + 2 * 5)
6 * (2 + 4 * (7 * 4 * 4 + 4 + 6) * 4) + ((9 + 7 * 6 * 7) * 8) * 7 * 3 * 9
3 + (3 + 2 * 7 * 6) * (5 * 2 + 2 * 2) * 2 * (5 * 2 + 3) + 8
6 * 2 * (8 * 9)
7 * 4 + 9 * (9 * 2)
(2 * 6) + (6 + 7 + 5 + 8 + 4)
6 + (9 * 5 * 6 + 5 + 6 * 6)
(5 + 9) + 2 + (5 * 7)
7 * 7 + 4 + (4 * 3) * 8 * (4 * (3 * 3 + 6))
7 * (8 + 5 + (3 + 7)) * (4 + 4 + 8 + (7 * 7 * 6 + 9)) + 6 * 8 + 8
4 + (8 + (5 + 2 * 7 + 6 * 7 * 6) + 5 * 9)
8 + (6 + 3 * 7 * 8 + 8 * 7) + 8 + 5 + 8 * 9
7 * (7 * (3 + 3) * 6 + 9 * 7 + (2 + 3 + 6 * 8 * 6)) + 3 * (7 * 9)
(5 * (4 + 6) * 4 * 8 + 6 * 3) + 6 + 2 + (8 * 5 + 9 * 3 + (5 + 7 * 5 + 7) + 3)
(2 * 7 + 3) + 9 * 8 * 7
(4 * 3 + 9 * 5 + 4 + 4) * 9 + (3 * 9 * 7 * 4) * (3 + 5 * 4 + 6 + 5) + ((7 + 6 * 7 * 4 + 5) + 2 * 7 + 8) + 8
(7 * 4 * 4 + 7) + (6 * 9 * 7) + 5 + (3 + 5 * 9 * 4 * 9 * 2) + 4 * 7
(4 + 2 * 2 * 8 + 5 * 3) + 4 * 5 * 3 * (4 * (2 * 3 + 2 * 8 + 2) + 4 * 9 * (6 + 3 * 7 * 3) * 5) + (7 * 8 * 9 + 3 * 9 * 4)
8 + (3 + 3 + 2)
6 * (3 * 6 * (3 + 5 + 8 + 5 + 5))
(9 + 7 * 9 + (3 * 4 * 2 * 2 * 7) + 5 + 9) + 7 + (9 * (8 * 9) * 9) + 3
(9 * 6 * 8 * 2) + (6 + (9 * 5 + 6 * 5 + 5 + 5) * (6 + 7 * 8 * 4 + 4 + 6) + 9) + 9 * 7 * 4
4 + (3 * (3 + 4)) * 8 + 4 + 2
((9 * 2 * 5 * 3 + 9 + 3) * (7 * 6 * 9 * 8 * 2) * 8 + 4) * 6 + 8 * 6 + 9 + (4 * 3 + 2 * 9)
(8 + 5 + (6 * 7 * 2 * 4 * 8)) * (9 + 8 + (4 + 8 * 2 + 8 * 4) * 9 * 8 * 9) + 7 + 9 + 7
(5 + 2 + 3 * 5) * ((9 * 8) * 8 * 2 * 6 + (9 * 4 * 7)) + (5 + 3 * (5 + 7 + 6 * 4 + 8 + 5)) + (7 + 6 * 2 + 2 * 6 * 7) + 2
7 * 2 + 7 + 8 + (9 * 9 + 8 * 6 + 7 * 7) * (7 + 3 + 5 * 4)
5 * (5 + 2 + 6) * 2 + (7 * 5 + 4 + (8 * 9 + 8 * 9 + 8) + 3)
4 + (3 + (4 * 4) + 8 + 8 * 9 + 7) * (4 * 4 * 2) + 8 * 5
6 + 4 + ((5 + 7) + (8 + 9 * 3 + 5 * 9)) + (4 + 8 + 7 * 6) * 5
3 + ((6 + 2 + 6) * 9 + 8 + (5 + 5) * 6 * (8 + 6 + 7 + 7 + 9 * 9)) + 9
8 * 8
(3 + 7) * 2 + 2
2 * ((4 * 9 + 9 + 5 * 7 * 9) + 8 * 3 + 7 * 7) + ((3 * 4 + 4 + 6 * 9 + 8) * (7 * 2 * 9 + 8 + 5) * 9 * (9 * 3 * 3) + 6)
(4 + 6 * 5 * 7 * 7 + 6) + 9 + 8 + 8 * 3 * 8
7 * 6 * (3 + 5 + 6 + 4 + 5 + (2 + 2 + 7)) + 6 + 3 * (4 * (3 + 4) * 9 + 3 * (7 * 4 + 3 + 6))
9 * 5 * 7 + (5 + 2 * 4 * 4 + 9 + 6)
(6 + 2 * 8 * 6 + (5 + 9) + 3) * 5 + 6 + 4
6 + 8 + 5
6 + (8 + (6 * 3 * 5) + 4 + 5 * (5 * 6 * 2) + 8) + 3 + 9 * 8 + 6
3 + (2 + 9 + 2 * (8 + 2 * 3 * 6 * 9) * 2) * 4
7 + 4 + (8 + 7 * (3 * 2 * 7 + 2 + 3 * 8)) + 9 * ((5 + 5) + 2)
2 + (2 * 5 + 5 + 9 + 4) * 2 + 8 + 8
(2 + 4) + ((9 + 4) * 3 + 7 * 6) + 9 * 6
(9 * (7 + 5 + 8 + 8) + 8 + 5) + ((5 + 9 + 4 * 7 * 5) * 4 + 6 + 9 * 9)
4 + 8 + ((6 + 2 + 2 * 6 * 2) + 7) * 7 + (3 + 8 + 4 + 2)
((4 * 2 * 9 + 5 * 9) * 7) * 9 * (7 * 8 * 6 + 8 * 6 * 8)
(4 * (8 * 5 * 5)) + 5 + 6 * 2 + (2 + 9 + 7 + 6) * 5
(6 + 2) + 5
2 * (3 * 4) * 4 + 6
2 * 8 * (6 * (7 * 4 * 9) + (2 + 2) * 2 * (6 * 2 + 9)) * (7 * (2 * 5 + 3 * 8 * 4) * (3 + 7) + 6 + 2 * 5)
3 * 7 + (4 * 3 + 5 + 9 + 2)
6 * 5 * 3 + 3 * 7 * ((3 * 4 * 3 + 8 + 6) * 4)
(6 * 6 + 4 + 5 * 5) * 7
((6 + 8 + 4 + 5 + 9) * 3 + 4 * 5 + 4) * 5 + 9 + 9 * 9
(9 + 4 * 5 * 5 + (3 * 3 + 5)) * 5 * 4 * 9 + (4 + 5 * 9)
2 + (9 + 5)
8 * (8 + 3 * 9 + 7)
(9 + (4 + 2 * 4 * 6 + 7 * 2)) + 5 * (5 * (3 * 7 + 3 * 8 * 8 * 8) * 9)
3 * ((4 + 3 * 8 + 5) * 9) * (6 * 5 + (2 + 5 + 4 + 3 + 8 + 2))
6 + (3 * 3 * 5 + 9 * 8 + 8) * 7 + 9
(5 * 8) * 2 * ((3 * 5 + 6 * 9 * 3 * 8) + 8 + 4 + 2 + 2)
(6 + 4 * 6 * 6) * (3 * 6) * 8
((7 * 8 + 6 * 8 + 2) + 5 * 6) + 5 * 7 * 6 + 6
4 + 8 * 9 * (2 * 5 * 8 + 9 * (5 * 8 + 9 * 4 + 6 + 4)) + 2
9 * (7 * 7 * 7 * 8 * 5) + 8 + 4
4 * 9
(9 * (7 * 7 * 7 * 9)) + 6 * 7 + 4 * 8
7 + (5 * 9 + (9 + 8 + 5)) + 4 * 7 + 8 * 5
6 * 2 + (7 * 9) * 6
(5 * 4) * (4 + 8)
9 * 4 + 6 * 5 * 6 + ((8 + 9 + 8) * 8 + 6 + (4 * 2 * 2 + 3 * 6))
7 + (7 * 2 * 4 + 2 * 5 * 4) * 7 * (9 * 4 * 2 * 7 + 9) + 8
(6 + 2) + (5 * 8 + 8 + 4)
(8 + (8 + 8 + 3) * 6 + (6 * 9 * 4 + 7) + 2) + 8 * 8 + 4 + ((7 + 4 + 5 + 8 + 9) + 6 + 7 + 9 + 6) + 3
((7 + 6 + 3) * 4 + 2 + 5 + 8) * 4 * 2 * 2
((4 + 6 + 3 + 2 + 2) + 3 * (7 * 6 + 9 * 5 + 6 * 4) * 3) * 3 * (5 + 4 + 3 * 9) * (9 + 3 + 2 + 5 * 7 + 5) + (4 * 2 + 6) + 4
4 + 4 + ((2 * 4 + 9 * 8 * 5 + 8) * 9 * 9 * 6 + 9) + (6 + (5 + 9))
3 + 8 * (3 + 8 * (3 * 7 * 4 * 2) + (6 * 9 * 8))
2 + 5 + ((5 + 4) * (2 + 4) * 9 + 6) + 5 * 9
7 + 7 + 6
8 + (7 + 8 + 7 + 7 * (8 + 8 + 9 * 2 + 8 + 2) + (3 * 6 + 3 * 2))
4 * 9 + (4 * (7 + 7 + 7 + 8 + 5 + 2) + 4 * 6 + 2 + 6)
(4 * 9 * 7 + 8 + 3 + 9) + 8 + (5 * 9 + 9 + 3 + 3 + 4) * 9 * 8
(5 + 5 * 6) * (6 + 8 + 7) + (5 + 2 + 5 * 5 * (3 + 7 + 6 * 9)) + 9
4 * 2 + (4 + 5 + (3 + 5 + 9) + 7 + 7 + 4) + 3 + (6 * (2 + 2 + 8 * 8) + (8 + 9 * 7 + 7 + 6 * 9) + (3 * 9 * 3 * 5 + 5) * 5) * 3
7 + 2 + (4 * 3) * 7 + (2 * 3 + 7 * 9)
5 * 9 * 2 * (5 * 2) + 5
4 + 4 * 6 + (2 + 5 + 6 + 8 * 7)`;
let realHomework = parseHomework(realInput);

// can include parentheses.
// currently set to calculate with addition precedence over multiplication.
// can also calculate left to right, if modified.
const calculate = (expr) => {
    let parentheses = captureGroup(expr);
    if (!parentheses) {
        return parseInt(addFirst(expr));
    } else {
        return parseInt(calculate(expr.replace('(' + parentheses + ')', calculate(parentheses))));
    }
}

// captures first sub-expression in parentheses.
// if there are nested parentheses, captures outside-most parentheses group.
// does not include the '(...)' in the return -- just the contents.
const captureGroup = (expr) => {
    // find opening parenthesis
    let start = expr.indexOf('(');
    if (start === -1) return '';

    // count nested ( until reaching the matching ) from start.
    // first, find index of matching ).
    let matchCount = 0, matchIndex = -1;
    for (let i = start + 1; i < expr.length; i++) {
        if (expr[i] === '(') {
            matchCount += 1;
        } else if (expr[i] === ')') {
            matchCount -= 1;
        }
        if (matchCount < 0) {
            matchIndex = i;
            break;
        }
    }
    // then, count nested ( until matchIndex.
    let nests = 1;
    for (let i = start + 1; i <= matchIndex; i++) {
        if (expr[i] === '(') nests += 1;
    }

    // return substring from start to nests number of ')'
    return expr.slice(start + 1, nthIndexOf(')', expr, nests, start));
}

// base case helper function: expr must be without parentheses.
// evaluates left to right, without regard to operator precedence.
const leftToRight = (expr) => {
    // base case: if expr is of the form a OP b.
    let re = /^\d+[\+\*]\d+$/g;
    if (re.test(expr)) {
        return myEval(expr);
    } else {
        // everything except the last OP and number.
        let beg = expr.match(/^.*(?=[\+\*]\d+)/)[0];
        // last OP and number.
        let end = expr.match(/[\+\*]\d+$/)[0];
        return myEval(leftToRight(beg) + end);
    }
};

// expr must be without parentheses.
const addFirst = (expr) => {
    // base cases.  only addition or multiplication
    if (expr.indexOf('*') === -1 || expr.indexOf('+') === -1) {
        return myEval(expr).toString();
    } else {
        // find an addition.  recurse with that addition already evaluated.
        let sub = expr.match(/\d+\+\d+/g)[0];
        let subLoc = expr.search(/\d+\+\d+/g);
        let spliced = expr.slice(0, subLoc) + myEval(sub) + expr.slice(subLoc + sub.length);
        return addFirst(spliced);
    }
}

// avoids need for the actual JS eval function.
const myEval = (expr) => {
    return Function(`return ${expr};`)();
};

// returns the index of the nth occurrence of a substring, or -1 if there isn't one.
const nthIndexOf = (val, string, n, startIndex = 0) => {
    let re = new RegExp("\\" + val, 'g');
    if (n === 1) return string.indexOf(val, startIndex);
    if (n < 1) return -1;
    if (n > string.match(re).length) return -1;
    return string.indexOf(val, nthIndexOf(val, string, n - 1, string.indexOf(val, startIndex) + 1));
}

console.log(realHomework.map(item => calculate(item)).reduce((a,c) => a + c));
// console.log(typeof calculate(testInput1));
// console.log(calculate(testInput1));
// console.log(calculate(testInput2));
// console.log(calculate(testInput3));
// console.log(calculate(testInput4));
// console.log(calculate(testInput5));
// console.log(calculate(testInput6));
